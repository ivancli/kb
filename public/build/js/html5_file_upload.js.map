{"version":3,"sources":["html5_file_upload.js"],"names":[],"mappingsfile":"html5_file_upload.js","sourcesContent":["/**\n * Created by User on 4/07/2016.\n */\n\nwindow.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;\nwindow.resolveLocalFileSystemURL = window.webkitResolveLocalFileSystemURL || window.webkitResolveLocalFileSystemURL;\n\n\nvar fs = null;\nvar cwd = null;\nvar DONE_MSG = 'Donezo';\nvar NOT_IMG_MSG = 'One or more files is not an image.';\nvar footer = document.querySelector('footer');\n\nfunction setLoadingTxt(obj) {\n    var el = document.querySelector('aside');\n    if (obj && obj.txt) {\n        var stayOpen = obj.stayOpen || false;\n        var isError = obj.error || false;\n\n        if (isError) {\n            el.classList.add('red');\n        }\n\n        el.textContent = obj.txt;\n        el.classList.add('show');\n\n        if (!stayOpen) {\n            window.setTimeout(setLoadingTxt, 3000);\n        }\n    } else {\n        el.classList.remove('show');\n        el.classList.remove('red');\n    }\n}\n\nfunction writeFile(file, dirEntry, callback) {\n    dirEntry.getFile(file.name, {create: true}, function (fileEntry) {\n        fileEntry.createWriter(function (writer) {\n            writer.onwriteend = callback;\n            writer.onerror = callback;\n            writer.write(file);\n        }, onError);\n    }, onError);\n}\n\nfunction onError(e) {\n    switch (e.code) {\n        case FileError.INVALID_MODIFICATION_ERR:\n            setLoadingTxt({\n                txt: 'Error: that directory path already exists',\n                error: true\n            });\n            break;\n        default:\n            setLoadingTxt({txt: 'Error code: ' + e.code, error: true});\n            break;\n    }\n}\n\nfunction toArray(list) {\n    return Array.prototype.slice.call(list || [], 0);\n}\n\nfunction readDirectory(dirEntry, callback) {\n    var dirReader = dirEntry.createReader();\n    var entries = [];\n\n    // Call the reader.readEntries() until no more results are returned.\n    var readEntries = function () {\n        dirReader.readEntries(function (results) {\n            if (!results.length) {\n                callback(entries);\n            } else {\n                entries = entries.concat(toArray(results));\n                readEntries();\n            }\n        }, onError);\n    };\n\n    readEntries(); // Start reading dirs.\n}\n\nfunction getEntry(fullPath, callback) {\n    var fsUrl = fs.root.toURL() + fullPath;\n    window.resolveLocalFileSystemURL(fsUrl, function (entry) {\n        if (entry.isDirectory) {\n            cwd = entry;\n        }\n        callback(entry);\n    });\n}\n\nfunction onThumbnailClick(e) {\n    var el = e.target.parentElement;\n\n    if (el.tagName == 'FOOTER') {\n        getEntry(cwd.fullPath + '/..', renderImages);\n        return;\n    }\n\n    var isDirectory = Boolean(el.dataset.isDirectory);\n    if (isDirectory) {\n        getEntry(el.dataset.fullPath, renderImages);\n    } else {\n        getEntry(el.dataset.fullPath, function (entry) {\n            window.open(entry.toURL());\n        });\n    }\n}\n\nfunction onClose(e) {\n    e.stopPropagation();\n\n    var el = e.target.parentElement;\n\n    el.classList.add('slim');\n\n    var onTransitionEnd = function (e) {\n        if (e.propertyName == 'width') {\n            getEntry(el.dataset.fullPath, function (entry) {\n                el.parentElement.removeChild(el);\n\n                entry.isDirectory ? entry.removeRecursively(function () {\n                }, onError) :\n                    entry.remove(function () {\n                    }, onError);\n            });\n        }\n    };\n\n    // Support every browser even though only Chrome supports the Filesystem\n    // and drag and drop folder API. Hopefully someone will polyfill :)\n    el.addEventListener('webkitTransitionEnd', onTransitionEnd);\n    el.addEventListener('transitionend', onTransitionEnd);\n    el.addEventListener('MSTransitionEnd', onTransitionEnd);\n    el.addEventListener('oTransitionEnd', onTransitionEnd);\n}\n\nfunction renderImages(dirEntry) {\n    readDirectory(dirEntry, function (entries) {\n        // Handle no files case.\n        if (!entries.length) {\n            /* no files */\n        }\n\n        entries.forEach(function (entry, i) {\n            var div = document.createElement('div');\n\n            div.dataset.fullPath = entry.fullPath;\n            console.info('div.dataset.fullPath', div.dataset.fullPath);\n\n            var img = new Image();\n            if (entry.isDirectory) {\n                /* it's a folder */\n            } else {\n                //img.src = window.URL.createObjectURL(files[i]); // Equivalent to item.getAsFile().\n                entry.file(function (f) {\n                    console.info('entry.toURL()', entry.toURL());\n                    img.src = f.type.match('^image/') ? entry.toURL() : 'file.png';\n                    document.body.appendChild(img);\n                }, onError);\n            }\n\n            img.title = entry.name;\n            img.alt = entry.name;\n        });\n    });\n}\n\nfunction onDrop(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    var items = e.dataTransfer.items;\n    var files = e.dataTransfer.files;\n\n    for (var i = 0, item; item = items[i]; ++i) {\n        // Skip this one if we didn't get a file.\n        if (item.kind != 'file') {\n            continue;\n        }\n\n        var entry = item.webkitGetAsEntry();\n        if (entry.isDirectory) {\n            /* it's a folder */\n        } else {\n            if (entry.isFile && files[i].type.match('^image/')) {\n                // Copy the dropped entry into local filesystem.\n                entry.copyTo(cwd, null, function (copiedEntry) {\n                    renderImages(cwd);\n                }, onError);\n            } else {\n                /* it's not an image */\n            }\n        }\n    }\n}\n\nfunction initFileDragDrop() {\n    $(\".lbl-new-profile-pic\").on(\"drop\", function (e) {\n        onDrop(e.originalEvent);\n    }).on(\"dragstart\", function () {\n        e.preventDefault();\n        return false;\n    }).on(\"dragover\", function (e) {\n        e.preventDefault();\n        return false;\n    }).on(\"dragenter\", function (e) {\n        e.target.classList.add('active');\n    }).on(\"dragleave\", function () {\n        e.target.classList.remove('active');\n    });\n\n\n    window.requestFileSystem(TEMPORARY, 1024 * 1204, function (fileSystem) {\n        fs = fileSystem;\n        cwd = fs.root;\n        renderImages(cwd);\n    }, onError);\n}\n\n$(function () {\n    initFileDragDrop();\n});"]}